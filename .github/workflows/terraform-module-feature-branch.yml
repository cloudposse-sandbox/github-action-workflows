name: Terraform Module Feature Branch

on:
  workflow_call:
    inputs:
      artifactoryUrl:
        type: string
        description: The URL of the artifactory story.
        required: false
        default: https://artifactory-dev.opse.c1.vanguard.com/artifactory
      artifactoryUsername:
        type: string
        description: The user for artifactory.
        required: false
        default: secrets.JFROG_USER_NAME
      artifactoryKey:
        type: string
        description: The key/token for the artifactory user.
        required: false
        default: secrets.JFROG_TOKEN
      artifactoryRepo:
        type: string
        description: The URL of the artifactory story.
        required: false
        default: https://artifactory-dev.opse.c1.vanguard.com/artifactory
      golangReporter:
        type: string
        description: The reviewdog reporter to use for golang code.
        required: false
        default: "github-pr-check"
      golangEnabled:
        type: boolean
        description: "Whether to run golang linting checks."
        required: false
        default: true
      golangSourceDir:
        type: string
        description: The directory containing the source code to test
        required: false
        default: "."
      markdownEnabled:
        type: boolean
        description: "Whether to run markdown linting checks."
        required: false
        default: true
      markdownReporter:
        type: string
        description: The reviewdog reporter to use for markdown code.
        required: false
        default: "github-pr-check"
      terraformEnabled:
        type: boolean
        description: "Whether to run terraform linting checks."
        required: false
        default: true
      terraformReporter:
        type: string
        description: The reviewdog reporter to use for terraform code.
        required: false
        default: "github-pr-check"

jobs:
  golint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.golangEnabled == true }}

      - uses: reviewdog/action-golangci-lint@v2
        if: ${{ inputs.golangEnabled == true }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          golangci_lint_flags: --timeout 5m
          reporter: ${{ inputs.golangReporter }}
          workdir: ${{ inputs.golangSourceDir }}
          fail_on_error: true
          filter_mode: nofilter

  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.markdownEnabled == true }}

      - uses: reviewdog/action-markdownlint@v0
        if: ${{ inputs.markdownEnabled == true }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: ${{ inputs.markdownReporter }}
          filter_mode: nofilter
          fail_on_error: true

  # This job finds all directories that have terraform code in them and creates an JSON array of the paths so they can
  # be used as a matrix array in the next job.
  find-terraform-directories:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.terraformEnabled == true }}

      - id: set-matrix
        if: ${{ inputs.terraformEnabled == true }}
        run: |
          matrix=$(find ./ -name '*.tf' \
            -not -path '*/.terraform/*' \
            -exec dirname {} \; \
            | sort \
            | uniq \
            | jq --raw-input --slurp 'split("\n")| map(select(. != ""))')
          echo ::set-output name=matrix::$(echo $matrix)
    outputs:
      tfdirs_matrix: ${{ steps.set-matrix.outputs.matrix }}

  tflint:
    runs-on: ubuntu-latest
    needs: find-terraform-directories
    strategy:
      matrix:
        tfdir: ${{ fromJson(needs.find-terraform-directories.outputs.tfdirs_matrix) }}
    env:
      TFLINT_PLUGIN_DIR: ${{ github.workspace }}/.tflint.d/plugins
      TFLINT_PLUGINS: aws azurerm
      TFLINT_CACHE_VER: 1 # Increment this to force a cache refresh
    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.terraformEnabled == true }}

      - uses: hashicorp/setup-terraform@v2
        if: ${{ inputs.terraformEnabled == true }}

      - run: terraform init
        if: ${{ inputs.terraformEnabled == true }}
        working-directory: ${{ matrix.tfdir }}

      - name: cache tflint plugins
        id: cache-plugins
        uses: actions/cache@v3
        with:
          path: ${{ env.TFLINT_PLUGIN_DIR }}
          key: tflint-plugins-${{ env.TFLINT_CACHE_VER }}

      - name: tflint
        uses: reviewdog/action-tflint@v1.17.0
        if: ${{ inputs.terraformEnabled == true }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: ${{ inputs.terraformReporter }}
          filter_mode: nofilter
          fail_on_error: true
          tflint_rulesets: ${{ env.TFLINT_PLUGINS }}
          tflint_init: true
          working_directory: ${{ matrix.tfdir }}

  terratest:
    runs-on: ubuntu-latest
    steps:
      - uses: cloudposse/github-action-terratest@1.0.0
        with:
          sourceDir: test/src

      - name: Get latest version of aws nuke
        id: get-latest-aws-nuke
        run: |
          nukever=$(gh api /repos/rebuy-de/aws-nuke/releases | jq -r 'map(select(.prerelease == false and .draft == false))| .[0].tag_name')
          echo "AWS_NUKE_VERSION=$nukever" >> $GITHUB_ENV
        if: always()

      - name: Run aws nuke
        uses: cloudposse/github-action-aws-nuke@1.0.0
        with:
          version: steps.get-latest-aws-nuke.outputs.AWS_NUKE_VERSION

  upload:
    runs-on: ubuntu-latest
    needs: [golint, markdownlint, tflint, terratest]
    steps:
      - name: download zipfile of current sha
        run: |
          curl -L -o ${{ github.sha }}.zip https://github.com/${GITHUB_REPOSITORY#*/}/archive/${{ github.sha }}.zip

      - name: Upload artifact to artifactory
        uses: cloudposse-sandbox/vg-artifactory-upload@main
        with:
          artifactory_url: ${{ inputs.artifactoryUrl }}
          artifactory_user: ${{ secrets.JFROG_USER_NAME}}
          artifactory_key: ${{ secrets.JFROG_TOKEN}}
          repository: ${{ inputs.artifactoryRepo }}
          build_number: ${{ github.sha }}
          deploy_path:
            ${{ inputs.artifactoryNamespace }}/${{ inputs.moduleName }}/${{ inputs.moduleProvider }}/${{
            inputs.artifactVersion }}.zip
          artifact: ${{ github.sha }}.zip
# env:
#   ARTIFACTORY_REPO: "https://cloudposse.jfrog.io/artifactory/tfmodules"
#   MODULE_NAMESPACE: "vanguard"
#   MODULE_NAME: "terraform-example-module"
#   PROVIDER_NAME: "example"
#   VERSION: ${{ github.sha }}

# jobs:
#   publish-terraform-module:
#     name: publish terraform module to artifactory
#     runs-on: ubuntu-latest
#     steps:
#       - name: download zipfile of current sha
#         run: |
#           curl -L -o ${{ github.sha }}.zip https://github.com/${GITHUB_REPOSITORY#*/}/archive/${{ github.sha }}.zip
#       - name: upload to artifactory
#         run: |
#           curl -u"${{ secrets.JFROG_USER_NAME}}:${{ secrets.JFROG_TOKEN}}" \
#             -XPUT "${{ env.ARTIFACTORY_REPO}}/${{ env.MODULE_NAMESPACCE}}/${{ env.MODULE_NAME}}/${{ env.PROVIDER_NAME}}/${{ env.VERSION}}.zip" \
#             -T ${{ env.VERSION}}.zip
