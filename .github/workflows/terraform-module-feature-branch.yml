name: Terraform Module Feature Branch

on:
  workflow_call:
    inputs:
      golangEnabled:
        type: boolean
        description: "Whether to run golang linting checks."
        required: true
        default: "true"
      golangReporter:
        type: string
        description: The reviewdog reporter to use for golang code.
        required: true
        default: "github-pr-check"
      golangSourceDir:
        type: string
        description: The directory containing the source code to test
        required: true
        default: "."
      markdownEnabled:
        type: boolean
        description: "Whether to run markdown linting checks."
        required: true
        default: "true"
      markdownReporter:
        type: string
        description: The reviewdog reporter to use for markdown code.
        required: true
        default: "github-pr-check"
      terraformEnabled:
        type: boolean
        description: "Whether to run terraform linting checks."
        required: true
        default: "true"
      terraform_glob:
        type: string
        description: "Terraform files to check"
        required: true
        default: "*.tf"
      terraformReporter:
        type: string
        description: The reviewdog reporter to use for terraform code.
        required: true
        default: "github-pr-check"

jobs:
  golint:
    runs-on: ubuntu-latest
    steps:
      - uses: reviewdog/action-golangci-lint@v2
        if: ${{ inputs.golangEnabled == 'true' }}
        with:
          github_token: ${{ secretsgithubToken }}
          golangci_lint_flags: --timeout 5m
          reporter: ${{ inputs.golangReporter }}
          workdir: ${{ inputs.golangSourceDir }}
          fail_on_error: true
          filter_mode: nofilter

  markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: reviewdog/action-markdownlint@v0
        if: ${{ inputs.markdownEnabled == 'true' }}
        with:
          github_token: ${{ inputs.githubToken }}
          reporter: ${{ inputs.markdownReporter }}
          filter_mode: nofilter
          fail_on_error: true

  # This job finds all directories that have terraform code in them and creates an JSON array of the paths so they can
  # be used as a matrix array in the next job.
  find-terraform-directories:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.terraformEnabled == 'true' }}

      - id: set-matrix
        if: ${{ inputs.terraformEnabled == 'true' }}
        run: |
          matrix=$(find ./ -name '{{ inputs.terraform_glob }}' \
            -not -path '*/.terraform/*' \
            -exec dirname {} \; \
            | sort \
            | uniq \
            | jq --raw-input --slurp 'split("\n")| map(select(. != ""))')
          echo ::set-output name=matrix::$(echo $matrix)
    outputs:
      tfdirs_matrix: ${{ steps.set-matrix.outputs.matrix }}

  tflint:
    name: reviewdog/tflint
    runs-on: ubuntu-latest
    needs: find-terraform-directories
    strategy:
      matrix:
        tfdir: ${{ fromJson(needs.find-terraform-directories.outputs.tfdirs_matrix) }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ inputs.terraformEnabled == 'true' }}

      - uses: hashicorp/setup-terraform@v2
        if: ${{ inputs.terraformEnabled == 'true' }}

      - run: terraform init
        if: ${{ inputs.terraformEnabled == 'true' }}
        working-directory: ${{ matrix.tfdir }}

      - name: tflint
        uses: reviewdog/action-tflint@v1.17.0
        if: ${{ inputs.terraformEnabled == 'true' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: ${{ env.REPORTER }}
          filter_mode: nofilter
          fail_on_error: true
          tflint_rulesets: aws
          tflint_init: true
          working_directory: ${{ matrix.tfdir }}

  terratest:
    runs-on: ubuntu-latest
    steps:
      - uses: cloudposse/github-action-terratest@v1
        with:
          sourceDir: test/src
